name: CI
on: [push]
jobs:

  # Check linters on latest-ubuntu with specified go version.
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
      id: go
    - name: Code
      uses: actions/checkout@v1
      with:
        fetch-depth: 2
    - name: Install golangci-lint 
      run: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.23.1
    - name: Run golangci-lint using linters in .golangci.yml plus required ones hard-coded here
      run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m -E deadcode -E errcheck -E gofmt -E golint -E gosec -E govet -E ineffassign -E staticcheck
    - name: Run golangci-lint with optional linters (not required to pass)
      run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m --issues-exit-code=0 -E dupl -E gocritic -E gomnd -E gosimple -E lll -E prealloc

  # Test on combination of go and os versions.
  tests-on:
    name: ${{matrix.go-version}} ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [1.12.x, 1.13.x]
        os: [macos-latest, ubuntu-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Test
      run: go test -short -race -v ./...

  # Check code coverage on latest-ubuntu with specified go version.
  cover:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
      id: go
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 2
    - name: Generate coverprofile
      run: go test -short -coverprofile=coverage.txt -covermode=atomic ./...
    - name: Detect coverage regression with codecov.io
      run: bash <(curl -s https://codecov.io/bash)
